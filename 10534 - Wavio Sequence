#include <iostream>
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define all(x) x.begin(), x.end()
#define endl '\n'
#define sz(x) x.size()

void fast()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
const int N=1e5;

void LIS(const vector<int> &arr, vector<int> &LIS)
{
    vector<int>tmp;
    int n=arr.size();
    for(int i=0;i<n;i++){

        auto it =lower_bound(all(tmp),arr[i]);
        if(it!=tmp.end())
            *it= arr[i];
        else tmp.push_back(arr[i]);
        LIS.push_back(tmp.size());
    }
}
int n;
void solve(){

vector<int>arr(n);
for(int i=0;i<n;i++)
    cin>>arr[i];

    vector<int>lis;
    LIS(arr,lis);
    reverse(all(arr));
    vector<int>lds;
    LIS(arr,lds);
    reverse(all(lds));
    int ans=0;
    for(int i=0;i<n;i++){
        ans=max(ans,2*min(lis[i],lds[i])-1);
    }
    cout<<ans<<endl;

}
int main()
{
    fast();
    int t;

    while(cin>>n){
        solve();
    }


}




/*
 * don't be lazy in thinking ya
 * Think twice, code once
 * Think of different approaches to tackle a problem: write them down.
 * Think of different views of the problem. don't look from only one side.
 * don't get stuck in one approach.
 * common mistakes: over_flow
 *                  - out_of_bound index
 *                  -infinite loop
 *                  -corner cases
 *                  -double counting.
//	READ ALL PROBLEMS
//	Solve on paper first
//	If there's an equation, transform it into an easy one
//	Use binary search
//	Always think of patterns (LCM, GCD)
//	Be careful of unsigned
//	Think of a solution that gets TLE and optimize it
//	Reverse Thinking
//	Monotonic stack/dequeue
//	EV is computed using probabilities or number of ways
//	E(X + Y) = E(X) + E(Y)
//	E(X * Y) = E(X) * E(Y)
//	Try not to use doubles
//	Don't do DP in graphs on anything rather than DAGs
//	Don't use the fucking "double"

 */

